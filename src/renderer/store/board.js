import board from '../api/board'

const state = {
  cards: [],
  icons: {
    config: '<svg t="1585979749688" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1179" width="1em" height="1em"><path d="M966.776471 602.352941c-15.058824-3.011765-30.117647-12.047059-42.164706-24.094117-18.070588-18.070588-27.105882-39.152941-27.105883-66.258824 0-24.094118 9.035294-48.188235 27.105883-66.258824 12.047059-12.047059 24.094118-21.082353 42.164706-24.094117l27.105882-9.035294-6.023529-27.105883c-6.023529-21.082353-12.047059-42.164706-21.082353-63.247058-9.035294-21.082353-18.070588-39.152941-30.117647-57.22353l-15.058824-24.094118-24.094118 15.058824c-15.058824 9.035294-30.117647 12.047059-45.17647 12.047059-24.094118 0-48.188235-9.035294-63.247059-27.105883-18.070588-18.070588-27.105882-39.152941-27.105882-63.247058 0-15.058824 3.011765-30.117647 12.047058-45.176471l9.035295-30.117647-24.094118-15.058824c-18.070588-12.047059-39.152941-21.082353-60.235294-30.117647-21.082353-9.035294-42.164706-15.058824-63.247059-21.082353l-27.105882-6.023529-6.02353 27.105882c-3.011765 15.058824-12.047059 30.117647-24.094117 39.152942-33.129412 33.129412-93.364706 33.129412-129.505883 0-12.047059-12.047059-18.070588-24.094118-24.094117-39.152942l-9.035295-27.105882-27.105882 6.023529c-21.082353 6.023529-42.164706 12.047059-63.247059 21.082353-21.082353 9.035294-42.164706 18.070588-60.235294 30.117647l-24.094118 15.058824 15.058824 24.094118c9.035294 15.058824 12.047059 30.117647 12.047059 45.17647 0 24.094118-9.035294 48.188235-27.105883 63.247059-18.070588 21.082353-42.164706 30.117647-66.258823 30.117647-15.058824 0-30.117647-3.011765-45.176471-12.047059L102.4 240.941176l-15.058824 24.094118c-9.035294 18.070588-21.082353 36.141176-30.117647 60.235294-9.035294 21.082353-15.058824 42.164706-21.082353 63.247059l-6.023529 27.105882 27.105882 6.02353c15.058824 3.011765 30.117647 12.047059 39.152942 24.094117 18.070588 18.070588 27.105882 42.164706 27.105882 66.258824 0 24.094118-9.035294 48.188235-27.105882 63.247059-12.047059 12.047059-24.094118 21.082353-42.164706 24.094117l-24.094118 9.035295 9.035294 27.105882c6.023529 21.082353 12.047059 39.152941 18.070588 54.211765l3.011765 9.035294c9.035294 21.082353 18.070588 39.152941 30.117647 60.235294l12.047059 24.094118 24.094118-15.058824c15.058824-9.035294 27.105882-12.047059 45.17647-12.047059 24.094118 0 48.188235 9.035294 66.258824 27.105883 18.070588 18.070588 27.105882 39.152941 27.105882 63.247058 0 15.058824-3.011765 33.129412-12.047059 45.176471l-12.047059 30.117647 24.094118 15.058824c21.082353 12.047059 39.152941 21.082353 60.235294 30.117647 21.082353 9.035294 42.164706 15.058824 60.235294 21.082353l27.105883 9.035294 9.035294-27.105883c3.011765-15.058824 12.047059-30.117647 24.094117-42.164706 36.141176-33.129412 93.364706-33.129412 129.505883 0 12.047059 12.047059 21.082353 24.094118 24.094117 42.164706l9.035295 27.105883 27.105882-9.035294c21.082353-6.023529 42.164706-12.047059 60.235294-21.082353 21.082353-9.035294 42.164706-18.070588 60.235294-30.117647l24.094118-15.058824-12.047059-24.094118c-9.035294-15.058824-12.047059-30.117647-12.047059-45.17647 0-24.094118 9.035294-48.188235 27.105883-63.247059 18.070588-18.070588 39.152941-27.105882 63.247058-27.105882 15.058824 0 33.129412 3.011765 45.176471 12.047058l24.094118 15.058824 15.058823-24.094118c12.047059-21.082353 21.082353-39.152941 30.117647-60.235294 9.035294-21.082353 15.058824-42.164706 21.082353-63.247059l9.035294-27.105882-24.094117-12.047059z m-57.22353 75.294118c-3.011765 9.035294-9.035294 18.070588-12.047059 30.117647-15.058824-6.023529-30.117647-6.023529-48.188235-6.02353-39.152941 0-78.305882 15.058824-105.411765 45.176471-27.105882 27.105882-45.176471 66.258824-45.17647 105.411765 0 15.058824 3.011765 33.129412 6.023529 48.188235-9.035294 6.023529-18.070588 9.035294-30.117647 12.047059-9.035294 3.011765-21.082353 9.035294-30.117647 12.047059-6.023529-15.058824-18.070588-27.105882-30.117647-39.152941-27.105882-27.105882-66.258824-42.164706-105.411765-42.164706-39.152941 0-78.305882 15.058824-105.411764 42.164706-12.047059 12.047059-21.082353 24.094118-30.117647 39.152941-9.035294-3.011765-21.082353-6.023529-30.117648-12.047059-9.035294-3.011765-18.070588-9.035294-30.117647-12.047059 6.023529-15.058824 6.023529-30.117647 6.02353-48.188235 0-39.152941-15.058824-78.305882-45.176471-105.411765-27.105882-27.105882-66.258824-45.176471-105.411764-45.176471-15.058824 0-33.129412 3.011765-48.188236 6.02353-3.011765-9.035294-9.035294-15.058824-12.047059-24.094118l-3.011764-6.023529-9.035294-27.105883c15.058824-9.035294 27.105882-18.070588 39.152941-30.117647 27.105882-30.117647 42.164706-66.258824 42.164706-105.411764 0-39.152941-15.058824-78.305882-42.164706-105.411765-12.047059-12.047059-24.094118-21.082353-39.152941-30.117647 3.011765-9.035294 6.023529-18.070588 12.047058-30.117647 3.011765-9.035294 9.035294-21.082353 12.047059-30.117647 15.058824 6.023529 30.117647 6.023529 48.188236 6.023529 39.152941 0 78.305882-15.058824 105.411764-45.17647 27.105882-27.105882 45.176471-66.258824 45.176471-105.411765 0-15.058824-3.011765-33.129412-6.02353-48.188235 9.035294-6.023529 18.070588-9.035294 30.117647-12.047059 9.035294-3.011765 21.082353-9.035294 30.117648-12.047059 6.023529 15.058824 18.070588 27.105882 30.117647 39.152941 27.105882 27.105882 66.258824 42.164706 105.411764 42.164706 39.152941 0 78.305882-15.058824 105.411765-42.164706 12.047059-12.047059 21.082353-24.094118 30.117647-39.152941 9.035294 3.011765 21.082353 6.023529 30.117647 12.047059 9.035294 3.011765 21.082353 9.035294 30.117647 12.047059-6.023529 15.058824-6.023529 33.129412-6.023529 48.188235 0 39.152941 15.058824 78.305882 45.17647 105.411765 27.105882 27.105882 66.258824 45.176471 105.411765 45.17647 15.058824 0 33.129412-3.011765 48.188235-6.023529 6.023529 9.035294 9.035294 18.070588 12.047059 30.117647 3.011765 9.035294 9.035294 21.082353 12.047059 30.117647-15.058824 6.023529-27.105882 18.070588-39.152941 30.117647-27.105882 30.117647-42.164706 66.258824-42.164706 105.411765 0 39.152941 15.058824 78.305882 42.164706 105.411764 12.047059 12.047059 24.094118 21.082353 39.152941 27.105883-3.011765 9.035294-6.023529 18.070588-12.047059 30.117647z" fill="#2c2c2c" p-id="1180"></path><path d="M512 331.294118c-99.388235 0-180.705882 81.317647-180.705882 180.705882s81.317647 180.705882 180.705882 180.705882 180.705882-81.317647 180.705882-180.705882-81.317647-180.705882-180.705882-180.705882z m0 301.17647c-66.258824 0-120.470588-54.211765-120.470588-120.470588s54.211765-120.470588 120.470588-120.470588 120.470588 54.211765 120.470588 120.470588-54.211765 120.470588-120.470588 120.470588z" fill="#2c2c2c" p-id="1181"></path></svg>',
    back: '<svg t="1586613458159" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2730" width="1em" height="1em"><path d="M932.7 417.5c-17-38-41.1-72-71.9-101.3-30.5-29-65.9-51.7-105.2-67.6C715 232.3 672.1 224 627.9 224h-139V101.2c0-27.9-30.4-45.2-54.4-31L116.8 257.9c-23.6 14-23.6 48.1 0 62.1l317.7 187.7c24 14.2 54.4-3.1 54.4-31V364h139c51.5 0 100 19.1 136.5 53.8 35.5 33.8 55.1 78.1 55.1 124.9v98.1c0 46.8-19.6 91.2-55.1 124.9-36.5 34.7-85 53.8-136.5 53.8H397.1c-51.5 0-100-19.1-136.5-53.8-35.5-33.8-55.1-78.1-55.1-124.9 0-38.7-31.3-70-70-70s-70 31.3-70 70c0 43.3 9 85.4 26.7 125.1 17 38 41.1 72 71.9 101.3 30.5 29 65.9 51.7 105.2 67.6 40.6 16.4 83.6 24.7 127.8 24.7h230.7c44.2 0 87.2-8.3 127.8-24.7 39.3-15.9 74.7-38.6 105.2-67.6 30.7-29.2 54.9-63.3 71.9-101.3 17.7-39.7 26.7-81.8 26.7-125.1v-98.1c0-43.4-9-85.5-26.7-125.2z" p-id="2731"></path></svg>'
  }
}

const mutations = {
  addItem (state, payload) {
    let itemId = -1
    let updateCard
    if (!payload.id) {
      for (let card of state.cards) {
        if (card.id === payload.cardId) updateCard = card
        for (let item of card.items) {
          if (itemId < item.id) itemId = item.id
        }
      }
      if (itemId === -1) itemId = 1
      else itemId++
    } else {
      itemId = payload.id
      updateCard = state.cards.find(card => card.id === payload.cardId)
    }
    updateCard.items.push({ text: payload.text, id: itemId })
  },
  deleteItem (state, payload) {
    let card = state.cards.find(card => card.id === payload.cardId)
    let pos = card.items.findIndex(item => item.id === payload.itemId)
    card.items.splice(pos, 1)
  },
  moveItem (state, payload) {
    let { srcCardId: src, dstCardId: dst, id, itemId } = payload
    let srcCard = state.cards.find(card => card.id === src)
    let dstCard = state.cards.find(card => card.id === dst)
    let pos = srcCard.items.findIndex(item => item.id === id)
    let item = srcCard.items.splice(pos, 1)[0]
    if (!itemId) dstCard.items.push(item)
    else {
      let insertPos = dstCard.items.findIndex(item => item.id === itemId)
      dstCard.items.splice(insertPos, 0, item)
    }
  },
  addCard (state, payload) {
    let { id, title, themeColor } = payload
    state.cards.push({id: id, title: title, themeColor: themeColor, items: []})
  },
  updateCard (state, payload) {
    let { id, title, themeColor } = payload
    let updatedCard = state.cards.find(card => card.id === id)
    updatedCard.title = title
    updatedCard.themeColor = themeColor
  },
  deleteCard (state, payload) {
    let { cardId } = payload
    let delPos = state.cards.findIndex(card => card.id === cardId)
    if (delPos === -1) return
    state.cards.splice(delPos, 1)
  },
  resetCards (state, payload) {
    state.cards = payload
  }
}

const actions = {
  loadCards ({ commit }) {
    return board.getCards().then(cards => {
      commit('resetCards', cards)
    })
  },
  saveCards ({ state }) {
    return board.saveCards(state.cards)
  }
}

export default {
  state,
  mutations,
  actions
}
